/*
함수 포인터는 함수의 주소를 저장하는 변수.

01 함수 포인터란
함수 포인터는 함수의 시작 주소를 저장하는 포인터입니다.
2_1.cpp 정수형 변수와 포인터 변수
n은 정수형 변수이며 pn은 포인터 변수.
pn의 주소값은 n의 주소입니다.
함수의 이름은 함수가 시작하는 시작 주소이며, 함수 포인터는 이 함수의 주소를 저장하는 포인터.
함수 포인터는 함수 시그니처(반환타입+매개변수)를 같게 선언합니다.
2_2.cpp 함수 포인터 선언과 사용
Print가 함수의 시작 주소이므로 pf도 함수의 시작주소이고 함수 호출은 pf()처럼 호출.
또한, 함수 포인터는 메모리 접근 연산자(*)를 붙여도 함수의 주소입니다.
pf와*pf는 Print()함수의 주소이며 pf()나(*pf)()는 같은 문장.

02 함수 포인터의 종류
함수는 정적 함수와 멤버 함수로 나눌 수 있습니다.
정적 함수로는 전역 함수, namespace 내의 전역함수, static멤버 함수가 해당.
멤버 함수는 객체와 주소로 각각 호출할 수 있으므로 함수 호출은 3가지
1)정적 함수 호출(정적 함수)
2)객체로 멤버 함수 호출(멤버 함수)
3)객체의 주소로 멤버 함수 호출(멤버 함수)
2_3.cpp C++함수 호출 방식

정적 함수 호출
정적 함수 포인터는 함수 시그니처만 알면 쉽게 선언할 수 있습니다.
전역 함수, namespace 내의 전역함수, static멤버 함수는 모두 함수 호출 규약이 같아 포인터가 같습니다.
2_4.cpp 정적 함수 포인터
정적 함수는 모두 같은 함수 포인터 pf를 사용했습니다.

함수 호출 규약
함수 호출 시 전달되는 인자의 순서나 함수가 종료될 때 함수의 스택을 정리하는 시점 등을 약속한 것.
대표적인 함수 호출 규약으로 stdcall, cdecl, thiscall, fastcall 등이 있습니다.
정적 함수 기본 함수 호출 규약은 cdecl입니다.
또한, 멤버 함수는 thiscall을 사용합니다.
그래서 정적 함수 포인터와 멤버 함수 포인터를 각기 다르게 선언합니다.

객체와 주소로 멤버 함수 호출
멤버 함수 포인터는 함수 포인터 선언에 어떤 클래스의 멤버 함수를 가리킬 것인지 클래스 이름을 지정해야 합니다.
시그니처가 void Point::Print(int n)인 멤버 함수의 포인터는 void (Point::*pf)(int)로 선언.
1)*객체로 멤버 함수 호출 시에는 .*연산자를 이용합니다. (객체.*pf)(10)
2)*주소로 멤버 함수 호출 시에는 ->*연산자를 이용합니다. (주소->*pf)(10)
또한, 함수 호출 시 연산자 우선순위로 인해 객체와 .*,->*연산자 사이에 ()연산자를 사용해야 합니다.
2_5.cpp Point클래스의 멤버 함수 포인터
pf1은 Point클래스의 void형 반환 타입과 인자가 없는 const멤버 함수 포인터입니다.
pf2는 Point클래스의 void형 반환 타입과 int형 인자를 갖는 멤버 함수 포인터입니다.

03 클라이언트 코드와 서버 코드
어떤 기능이나 서비스를 제공하는 코드 측을 서버 코드(서버)
그 기능을 제공받는 코드 측을 클라이언트 코드(클라이언트)
일반적으로 서버는 하나지만 서버 코드를 사용하는 클라이언트는 여러 개입니다.
2_6.cpp 서버 코드와 클라이언트 코드
PrintHello()함수는 출력 기능을 제공하므로 서버.
main()함수는 PrintHello()함수를 호출해 출력 기능을 제공받으므로 클라이언트 코드.
일반적으로는 클라이언트 코드 쪽에서 서버를 호출하고 기능을 사용하지만 때때로 서버가 호출 합니다.
클라이언트가 서버를 호출하면 콜(call), 서버가 클라이언트를 호출하면 콜백(callback).
콜백 메커니즘을 이용하면 알고리즘 정책을 클라이언트에서 유연하게 바꿀 수 있게 서버를 더욱 추상화할 수 있다.
또한 대부분 GUI의 강력한 이벤트 기능도 콜백 메커니즘으로 구현됩니다.
STL의 많은 알고리즘도 콜백을 이용해 클라이언트 정책을 반영합니다.
윈도의 모든 프로시저(procedure)는 시스템이 호출하는 '콜백 함수'입니다.
2_7.cpp 콜백 함수
Client()함수를 '콜백 함수'라 합니다.
실제로는 서버는 여러 클라이언트에 의해 호출되며 클라이언트의 존재를 알지 못합니다.
그래서 서버가 미리 client()함수를 알고 호출하는 것은 불가능.
따라서 콜백 메커니즘을 구현하려면 클라이언트가 서버를 호출할 때 서버에 클라이언트의 정보를 제공해야 합니다.
서버에 클라이언트 정보를 제공하는 방법 중 대표적인 방법이 함수 포인터 매개변수를 이용해 
콜백 함수의 주소를 전달하는 방법입니다.(그 외에도 함수 객체, 대리자, 전략 패턴 등을 사용)
2_8.cpp 함수 포인터를 이용한 콜백 메커니즘 구현
여기서 서버 함수 For_each()는 정수형 배열의 원소를 begin부터 end까지 이동하며 클라이언트 콜백 함수를 호출.
서버는 배열의 원소에 대해 반복적인 작업을 수행할 뿐 구체적인 작업은 알지 못합니다.
구체적인 작업은 클라이언트에서 콜백 함수 Print1(), Print2(), Print3()를 이용해 수행.
클라이언트는 서버 함수 For_each()를 세 번 호출합니다.
하지만, 세 번의 출력 결과를 클라이언트에 의해 결정됩니다.
출력 정책은 클라이언트만이 알고 있습니다.
STL의 for_each알고리즘을 사용하여 만들 수 있습니다.
2_9.cpp STL의 for_each 알고리즘 사용

*/